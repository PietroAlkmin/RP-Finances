/**
 * Configura√ß√£o de exemplo para integra√ß√£o com Binance
 * Arquivo de exemplo - N√ÉO commitar com chaves reais
 */

import type { BinanceConfig } from '../ts/integrations/binance/BinanceTypes';

// Carregar vari√°veis de ambiente
import 'dotenv/config';

// ===== CONFIGURA√á√ÉO BINANCE =====
export const BINANCE_CONFIG: BinanceConfig = {
  // Usar vari√°veis de ambiente do arquivo .env
  apiKey: process.env.BINANCE_API_KEY || 'SUA_BINANCE_API_KEY_AQUI',
  apiSecret: process.env.BINANCE_API_SECRET || 'SUA_BINANCE_API_SECRET_AQUI',
  
  // URL base (pode ser omitida para usar produ√ß√£o)
  baseUrl: process.env.BINANCE_BASE_URL, // undefined = produ√ß√£o
  
  // Testnet (recomendado para desenvolvimento)
  testnet: process.env.NODE_ENV === 'development' ? true : false
};

// ===== VALIDA√á√ÉO =====
export function validateBinanceConfig(): boolean {
  if (!BINANCE_CONFIG.apiKey || BINANCE_CONFIG.apiKey === 'SUA_BINANCE_API_KEY_AQUI') {
    console.error('‚ùå BINANCE_API_KEY n√£o configurada');
    return false;
  }
  
  if (!BINANCE_CONFIG.apiSecret || BINANCE_CONFIG.apiSecret === 'SUA_BINANCE_API_SECRET_AQUI') {
    console.error('‚ùå BINANCE_API_SECRET n√£o configurada');
    return false;
  }
  
  console.log('‚úÖ Configura√ß√£o Binance validada');
  console.log(`üåê Modo: ${BINANCE_CONFIG.testnet ? 'Testnet' : 'Produ√ß√£o'}`);
  
  return true;
}

// ===== CONFIGURA√á√ïES DE SEGURAN√áA =====
export const BINANCE_SECURITY = {
  // Permiss√µes necess√°rias na API Key
  requiredPermissions: [
    'SPOT', // Trading spot
    'MARGIN', // Trading margin (opcional)
    'FUTURES' // Trading futures (opcional)
  ],
  
  // Configura√ß√µes de rate limit
  rateLimits: {
    requestWeight: 6000, // Peso de requisi√ß√£o por minuto
    orderCount: 10, // Ordens por segundo
    rawRequests: 61000 // Requisi√ß√µes brutas por 5 minutos
  },
  
  // Recomenda√ß√µes de seguran√ßa
  securityRecommendations: [
    'Use apenas permiss√µes necess√°rias (leitura)',
    'Configure IP whitelist na Binance',
    'Use testnet para desenvolvimento',
    'Armazene chaves em vari√°veis de ambiente',
    'Monitore logs de acesso regularmente'
  ]
};

// ===== MAPEAMENTO DE MOEDAS =====
export const CURRENCY_MAPPING = {
  // Principais stablecoins
  stablecoins: ['USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'USDP', 'FRAX'],
  
  // Principais criptomoedas
  majorCryptos: ['BTC', 'ETH', 'BNB', 'ADA', 'DOT', 'SOL', 'AVAX', 'MATIC'],
  
  // Tokens DeFi
  defiTokens: ['UNI', 'SUSHI', 'COMP', 'AAVE', 'CRV', 'YFI', 'LINK', 'MKR'],
  
  // Convers√£o para display
  displayNames: {
    BTC: 'Bitcoin',
    ETH: 'Ethereum',
    BNB: 'Binance Coin',
    USDT: 'Tether USD',
    USDC: 'USD Coin',
    BUSD: 'Binance USD',
    ADA: 'Cardano',
    DOT: 'Polkadot',
    SOL: 'Solana',
    AVAX: 'Avalanche',
    MATIC: 'Polygon'
  }
};

// ===== INSTRU√á√ïES DE SETUP =====
export const SETUP_INSTRUCTIONS = `
üöÄ CONFIGURA√á√ÉO BINANCE - PASSO A PASSO

1. üìù CRIAR API KEY:
   ‚Ä¢ Acesse: https://www.binance.com/en/my/settings/api-management
   ‚Ä¢ Clique em "Create API"
   ‚Ä¢ Nomeie sua API Key (ex: "RP-Finances")
   ‚Ä¢ IMPORTANTE: Marque apenas "Enable Reading" (n√£o marque trading!)

2. üîí CONFIGURAR SEGURAN√áA:
   ‚Ä¢ Configure IP Whitelist (recomendado)
   ‚Ä¢ Anote API Key e Secret Key
   ‚Ä¢ NUNCA compartilhe suas chaves!

3. üõ†Ô∏è CONFIGURAR NO PROJETO:
   ‚Ä¢ Crie arquivo .env na raiz do projeto
   ‚Ä¢ Adicione as linhas:
     BINANCE_API_KEY=sua_api_key_aqui
     BINANCE_API_SECRET=sua_secret_key_aqui
     NODE_ENV=development

4. üß™ TESTAR (OPCIONAL - TESTNET):
   ‚Ä¢ Acesse: https://testnet.binance.vision/
   ‚Ä¢ Crie conta de teste
   ‚Ä¢ Configure BINANCE_BASE_URL=https://testnet.binance.vision
   ‚Ä¢ Use para desenvolvimento sem riscos

5. ‚úÖ VALIDAR:
   ‚Ä¢ Execute o projeto
   ‚Ä¢ Verifique logs de conex√£o
   ‚Ä¢ Teste coleta de dados

‚ö†Ô∏è IMPORTANTES:
‚Ä¢ Use apenas permiss√µes de LEITURA
‚Ä¢ Mantenha chaves seguras
‚Ä¢ Configure IP whitelist
‚Ä¢ Monitor logs de acesso
‚Ä¢ Use testnet para desenvolvimento
`;
